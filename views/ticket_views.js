// Ficheiro: views/ticket_views.js
// ReconstruÃ­do com um dashboard dinÃ¢mico e mais botÃµes.

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require('../database/db.js');

const BOT_LOG_IMAGE_URL = 'https://i.imgur.com/YuK1aVN.gif';

async function getTicketPanelPayload(guildId) {
    const settings = await db.get('SELECT ticket_panel_image_url FROM guild_settings WHERE guild_id = $1', [guildId]);
    const imageUrl = settings?.ticket_panel_image_url || BOT_LOG_IMAGE_URL;

    const embed = new EmbedBuilder()
        .setColor(0xE74C3C)
        .setTitle('ðŸŽ« Central de Atendimento')
        .setDescription('Precisa de ajuda ou tem alguma questÃ£o para a administraÃ§Ã£o?\n\nClique no botÃ£o abaixo para abrir um ticket privado. A nossa equipa de suporte irÃ¡ atendÃª-lo assim que possÃ­vel.')
        .setImage(imageUrl)
        .setFooter({ text: 'BasicFlow â€¢ Sistema de Tickets' });

    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('open_ticket')
            .setLabel('Abrir Ticket')
            .setStyle(ButtonStyle.Danger)
            .setEmoji('ðŸ“©')
    );
    return { embeds: [embed], components: [row] };
}

function getTicketDashboardPayload(ticketData) {
    const { user, guild, ticketId, claimed_by } = ticketData;
    let status = 'ðŸŸ¢ Aberto';
    if (claimed_by) {
        status = `ðŸŸ¡ Atendido por <@${claimed_by}>`;
    }

    const embed = new EmbedBuilder()
        .setColor(claimed_by ? 0xFEE75C : 0x57F287)
        .setTitle(`Ticket #${ticketId}`)
        .setAuthor({ name: user.tag, iconURL: user.displayAvatarURL() })
        .setThumbnail(guild.iconURL())
        .setImage(BOT_LOG_IMAGE_URL)
        .addFields(
            { name: 'Utilizador', value: `${user}`, inline: true },
            { name: 'Status', value: status, inline: true },
            { name: 'Data de Abertura', value: `<t:${Math.floor(Date.now() / 1000)}:f>`, inline: false }
        )
        .setFooter({ text: `Servidor: ${guild.name}` });
    
    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId(`close_ticket_prompt:${ticketId}`)
            .setLabel('Fechar')
            .setStyle(ButtonStyle.Danger)
            .setEmoji('ðŸ”’'),
        new ButtonBuilder()
            .setCustomId(`claim_ticket:${ticketId}`)
            .setLabel('Reivindicar')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('ðŸ™‹')
            .setDisabled(!!claimed_by), // Desativa se jÃ¡ foi reivindicado
        new ButtonBuilder()
            .setCustomId(`transcript_ticket:${ticketId}`)
            .setLabel('TranscriÃ§Ã£o')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('ðŸ“œ'),
        new ButtonBuilder()
            .setCustomId(`alert_staff:${ticketId}`)
            .setLabel('Alertar Staff')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('ðŸ””')
    );
    return { embeds: [embed], components: [row] };
}

module.exports = { getTicketPanelPayload, getTicketDashboardPayload };

